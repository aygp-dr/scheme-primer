;; Car and Cdr Practice Module

(define car-cdr-practice
  (lambda (menu-item-name)
    (display "=== 'car' and 'cdr' Practice ===")
    (newline)
    (newline)
    (display "'car' gets the first element of a pair, 'cdr' gets the second.")
    (newline)
    (display "For lists: 'car' gets the first element, 'cdr' gets the rest.")
    (newline)
    (display "Example: (car '(a b c)) => a, (cdr '(a b c)) => (b c)")
    (newline)
    (newline)
    (car-cdr-practice-menu)))

(define car-cdr-practice-menu
  (lambda ()
    (display "Choose an exercise:")
    (newline)
    (display "(0) Return to main menu")
    (newline)
    (display "(1) Basic car and cdr")
    (newline)
    (display "(2) Chained car/cdr operations")
    (newline)
    (display "(3) Extract elements from lists")
    (newline)
    (display "(4) Car/cdr puzzles")
    (newline)
    (let ((choice (read)))
      (cond
        ((equal? choice 0) (main-menu))
        ((equal? choice 1) (basic-car-cdr-exercise))
        ((equal? choice 2) (chained-car-cdr-exercise))
        ((equal? choice 3) (extract-elements-exercise))
        ((equal? choice 4) (car-cdr-puzzles))
        (else
         (display "Invalid choice. Please try again.")
         (newline)
         (car-cdr-practice-menu))))))

(define basic-car-cdr-exercise
  (lambda ()
    (display "=== Basic car and cdr ===")
    (newline)
    (display "What do these expressions evaluate to?")
    (newline)
    (newline)
    
    (define exercises
      '(((car '(a b c)) . a)
        ((cdr '(a b c)) . (b c))
        ((car '(1)) . 1)
        ((cdr '(1)) . ())
        ((car '((a b) c d)) . (a b))
        ((cdr '((a b) c d)) . (c d))
        ((car (cons 'x 'y)) . x)
        ((cdr (cons 'x 'y)) . y)))
    
    (define score 0)
    
    (for-each
     (lambda (exercise)
       (display "What does ")
       (display (car exercise))
       (display " evaluate to?")
       (newline)
       (display "Your answer: ")
       (let ((user-answer (read)))
         (let ((correct-answer (cdr exercise)))
           (cond
             ((equal? user-answer correct-answer)
              (display "Correct!")
              (set! score (+ score 1)))
             (else
              (display "Not quite. The answer is ")
              (display correct-answer)))
           (newline)
           (newline))))
     exercises)
    
    (display "You got ")
    (display score)
    (display " out of ")
    (display (length exercises))
    (display " correct!")
    (newline)
    (display "Press Enter to continue...")
    (newline)
    (read)
    (car-cdr-practice-menu)))

(define chained-car-cdr-exercise
  (lambda ()
    (display "=== Chained car/cdr operations ===")
    (newline)
    (display "We can chain car and cdr to navigate complex structures!")
    (newline)
    (display "Scheme even provides shortcuts: caar = (car (car x)), cadr = (car (cdr x)), etc.")
    (newline)
    (newline)
    
    (define exercises
      '(((car (cdr '(a b c))) . b)
        ((car (cdr (cdr '(1 2 3 4)))) . 3)
        ((cdr (cdr '(x y z))) . (z))
        ((car (car '((a b) c))) . a)
        ((cdr (car '((1 2 3) 4))) . (2 3))
        ((cadr '(a b c)) . b)
        ((caddr '(1 2 3 4)) . 3)
        ((cddr '(w x y z)) . (y z))))
    
    (define score 0)
    
    (for-each
     (lambda (exercise)
       (display "What does ")
       (display (car exercise))
       (display " evaluate to?")
       (newline)
       (display "Your answer: ")
       (let ((user-answer (read)))
         (let ((correct-answer (cdr exercise)))
           (cond
             ((equal? user-answer correct-answer)
              (display "Correct!")
              (set! score (+ score 1)))
             (else
              (display "Not quite. The answer is ")
              (display correct-answer)))
           (newline)
           (when (and (not (equal? user-answer correct-answer))
                      (member (caar exercise) '(cadr caddr cddr)))
             (display "Remember: ")
             (cond
               ((eq? (caar exercise) 'cadr)
                (display "cadr = (car (cdr ...))"))
               ((eq? (caar exercise) 'caddr)
                (display "caddr = (car (cdr (cdr ...)))"))
               ((eq? (caar exercise) 'cddr)
                (display "cddr = (cdr (cdr ...))")))
             (newline))
           (newline))))
     exercises)
    
    (display "You got ")
    (display score)
    (display " out of ")
    (display (length exercises))
    (display " correct!")
    (newline)
    (display "Press Enter to continue...")
    (newline)
    (read)
    (car-cdr-practice-menu)))

(define extract-elements-exercise
  (lambda ()
    (display "=== Extract Elements from Lists ===")
    (newline)
    (display "Write expressions using car/cdr to extract specific elements.")
    (newline)
    (newline)
    
    (define exercises
      '((((a b c d) b) . "(car (cdr ...))" "(cadr ...)")
        (((1 2 3 4 5) 3) . "(car (cdr (cdr ...)))" "(caddr ...)")
        ((((a b) (c d) (e f)) (c d)) . "(car (cdr ...))" "(cadr ...)")
        ((((x) y z) x) . "(car (car ...))" "(caar ...)")
        (((1 (2 3) 4) (2 3)) . "(car (cdr ...))" "(cadr ...)")
        (((a b c d e) e) . "(car (cdr (cdr (cdr (cdr ...)))))" "(car (cddddr ...))")))
    
    (for-each
     (lambda (exercise)
       (let ((lst (caar exercise))
             (target (cadar exercise)))
         (display "From the list ")
         (display lst)
         (display ", extract ")
         (display target)
         (newline)
         (display "Using car/cdr: ")
         (read)
         (display "Possible answers: ")
         (display (cadr exercise))
         (when (cddr exercise)
           (display " or ")
           (display (caddr exercise)))
         (newline)
         (newline)))
     exercises)
    
    (display "Exercise complete! Press Enter to continue...")
    (newline)
    (read)
    (car-cdr-practice-menu)))

(define car-cdr-puzzles
  (lambda ()
    (display "=== Car/Cdr Puzzles ===")
    (newline)
    (display "Challenge yourself with these puzzles!")
    (newline)
    (newline)
    
    (display "Puzzle 1: What happens if you try (car '())?")
    (newline)
    (display "Type 'error' or the result: ")
    (let ((answer (read)))
      (display "The answer is 'error'! You cannot take the car of an empty list.")
      (newline))
    (newline)
    
    (display "Puzzle 2: Given x = '((a . b) . (c . d)), what is (cdr (car x))?")
    (newline)
    (display "Your answer: ")
    (let ((answer (read)))
      (cond
        ((equal? answer 'b)
         (display "Correct! (car x) gives (a . b), then cdr gives b."))
        (else
         (display "The answer is b. (car x) = (a . b), then (cdr (a . b)) = b")))
      (newline))
    (newline)
    
    (display "Puzzle 3: How would you get the last element of '(1 2 3 4 5) using only car/cdr?")
    (newline)
    (display "Your expression: ")
    (read)
    (display "One answer: (car (cdr (cdr (cdr (cdr '(1 2 3 4 5))))))")
    (newline)
    (display "Or using shortcuts: (car (cddddr '(1 2 3 4 5)))")
    (newline)
    (newline)
    
    (display "Puzzle 4: True or false: (car (cons x y)) always equals x")
    (newline)
    (display "Type 'true' or 'false': ")
    (let ((answer (read)))
      (cond
        ((equal? answer 'true)
         (display "Correct! This is a fundamental property of cons/car/cdr."))
        (else
         (display "Actually, it's true! car and cons are inverses in this way.")))
      (newline))
    (newline)
    
    (display "Puzzles complete! Press Enter to continue...")
    (newline)
    (read)
    (car-cdr-practice-menu)))
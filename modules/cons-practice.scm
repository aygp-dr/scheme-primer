;; Cons Practice Module

(define cons-practice
  (lambda (menu-item-name)
    (display "=== 'cons' Practice ===")
    (newline)
    (newline)
    (display "The 'cons' procedure is fundamental in Scheme. It creates pairs!")
    (newline)
    (display "(cons a b) creates a pair with 'a' as the first element and 'b' as the second.")
    (newline)
    (display "Lists are built from pairs: (cons 1 (cons 2 (cons 3 '()))) creates (1 2 3)")
    (newline)
    (newline)
    (cons-practice-menu)))

(define cons-practice-menu
  (lambda ()
    (display "Choose an exercise:")
    (newline)
    (display "(0) Return to main menu")
    (newline)
    (display "(1) Basic cons operations")
    (newline)
    (display "(2) Building lists with cons")
    (newline)
    (display "(3) Nested cons structures")
    (newline)
    (display "(4) Cons puzzles")
    (newline)
    (let ((choice (read)))
      (cond
        ((equal? choice 0) (main-menu))
        ((equal? choice 1) (basic-cons-exercise))
        ((equal? choice 2) (building-lists-exercise))
        ((equal? choice 3) (nested-cons-exercise))
        ((equal? choice 4) (cons-puzzles))
        (else
         (display "Invalid choice. Please try again.")
         (newline)
         (cons-practice-menu))))))

(define basic-cons-exercise
  (lambda ()
    (display "=== Basic cons operations ===")
    (newline)
    (display "What do these cons expressions evaluate to?")
    (newline)
    (display "Enter your answer as a Scheme expression.")
    (newline)
    (newline)
    
    (define exercises
      '(((cons 1 2) . (1 . 2))
        ((cons 'a 'b) . (a . b))
        ((cons 1 '()) . (1))
        ((cons 'hello 'world) . (hello . world))
        ((cons #t #f) . (#t . #f))
        ((cons '() '()) . (()))
        ((cons 1 (cons 2 '())) . (1 2))
        ((cons 'x '(y z)) . (x y z))))
    
    (define score 0)
    
    (for-each
     (lambda (exercise)
       (display "What does ")
       (display (car exercise))
       (display " evaluate to?")
       (newline)
       (display "Your answer: ")
       (let ((user-answer (read)))
         (let ((correct-answer (cdr exercise)))
           (cond
             ((equal? user-answer correct-answer)
              (display "Correct!")
              (set! score (+ score 1)))
             (else
              (display "Not quite. The answer is ")
              (display correct-answer)))
           (newline)
           (when (and (not (equal? user-answer correct-answer))
                      (pair? correct-answer)
                      (not (null? (cdr correct-answer)))
                      (null? (cddr correct-answer)))
             (display "Note: When cons creates a list (second element is '() or a list), ")
             (display "we write it as (")
             (display (car correct-answer))
             (display " ")
             (display (cadr correct-answer))
             (display ") not (")
             (display (car correct-answer))
             (display " . (")
             (display (cadr correct-answer))
             (display "))")
             (newline)))
         (newline)))
     exercises)
    
    (display "You got ")
    (display score)
    (display " out of ")
    (display (length exercises))
    (display " correct!")
    (newline)
    (display "Press Enter to continue...")
    (newline)
    (read)
    (cons-practice-menu)))

(define building-lists-exercise
  (lambda ()
    (display "=== Building Lists with cons ===")
    (newline)
    (display "Build the requested lists using only cons and '().")
    (newline)
    (display "For example: To build (1 2 3), use (cons 1 (cons 2 (cons 3 '())))")
    (newline)
    (newline)
    
    (define exercises
      '(((1) . "(cons 1 '())")
        ((a b) . "(cons 'a (cons 'b '()))")
        ((1 2 3) . "(cons 1 (cons 2 (cons 3 '())))")
        ((x) . "(cons 'x '())")
        (() . "'()")
        ((#t #f #t) . "(cons #t (cons #f (cons #t '())))")))
    
    (for-each
     (lambda (exercise)
       (display "Build the list: ")
       (display (car exercise))
       (newline)
       (display "Using cons: ")
       (let ((user-expr (read)))
         (display "Expected something like: ")
         (display (cdr exercise))
         (newline)
         (display "Let's check if your expression produces the right result...")
         (newline)
         (newline)))
     exercises)
    
    (display "Exercise complete! Press Enter to continue...")
    (newline)
    (read)
    (cons-practice-menu)))

(define nested-cons-exercise
  (lambda ()
    (display "=== Nested cons structures ===")
    (newline)
    (display "cons can create complex nested structures!")
    (newline)
    (display "What do these expressions evaluate to?")
    (newline)
    (newline)
    
    (define exercises
      '(((cons (cons 1 2) 3) . ((1 . 2) . 3))
        ((cons 1 (cons 2 3)) . (1 2 . 3))
        ((cons (cons 'a 'b) (cons 'c 'd)) . ((a . b) c . d))
        ((cons '(1 2) '(3 4)) . ((1 2) 3 4))
        ((cons (cons 1 '()) (cons 2 '())) . ((1) 2))
        ((cons '(a) '((b) (c))) . ((a) (b) (c)))))
    
    (define score 0)
    
    (for-each
     (lambda (exercise)
       (display "What does ")
       (display (car exercise))
       (display " evaluate to?")
       (newline)
       (display "Your answer: ")
       (let ((user-answer (read)))
         (let ((correct-answer (cdr exercise)))
           (cond
             ((equal? user-answer correct-answer)
              (display "Correct!")
              (set! score (+ score 1)))
             (else
              (display "Not quite. The answer is ")
              (display correct-answer)))
           (newline)
           (newline))))
     exercises)
    
    (display "You got ")
    (display score)
    (display " out of ")
    (display (length exercises))
    (display " correct!")
    (newline)
    (display "Press Enter to continue...")
    (newline)
    (read)
    (cons-practice-menu)))

(define cons-puzzles
  (lambda ()
    (display "=== Cons Puzzles ===")
    (newline)
    (display "Solve these cons challenges!")
    (newline)
    (newline)
    
    (display "Puzzle 1: Using only cons, 1, 2, 3, and '(), create ((1 . 2) . 3)")
    (newline)
    (display "Your expression: ")
    (read)
    (display "Answer: (cons (cons 1 2) 3)")
    (newline)
    (newline)
    
    (display "Puzzle 2: What's the difference between (cons 'a (cons 'b 'c)) and (list 'a 'b 'c)?")
    (newline)
    (display "Type 'same' or 'different': ")
    (let ((answer (read)))
      (display "The answer is 'different'!")
      (newline)
      (display "(cons 'a (cons 'b 'c)) creates (a b . c) - an improper list")
      (newline)
      (display "(list 'a 'b 'c) creates (a b c) - a proper list")
      (newline))
    (newline)
    
    (display "Puzzle 3: How many cons cells are in the list (1 2 3 4 5)?")
    (newline)
    (display "Your answer: ")
    (let ((answer (read)))
      (cond
        ((equal? answer 5)
         (display "Correct! Each element needs one cons cell."))
        (else
         (display "The answer is 5. Each element in a list requires one cons cell.")))
      (newline))
    (newline)
    
    (display "Puzzle 4: True or false: (cons '() '()) equals '(())")
    (newline)
    (display "Type 'true' or 'false': ")
    (let ((answer (read)))
      (cond
        ((equal? answer 'true)
         (display "Correct! (cons '() '()) creates a list with one element: the empty list."))
        (else
         (display "Actually, it's true! (cons '() '()) creates (()) - a list containing the empty list.")))
      (newline))
    (newline)
    
    (display "Puzzles complete! Press Enter to continue...")
    (newline)
    (read)
    (cons-practice-menu)))
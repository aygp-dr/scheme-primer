How can we make synthesis of miniKanren expressions much faster?

An idea! We shoul be able to combine the `mko` relations from `core-mk.scm`, `core-mk-explicit-failure`, and `core-mk-explicit-failure-streams.scm`.  This should let us combine efficiency with expressiveness.

For example,

(run 1 (e)
  (mko `(run 1 (q) ,e) 'cat)      ;; mko from core-mk.scm
  (mko `(run 1 (q) ,e) 'dog)      ;; mko from core-mk.scm
  (mko `(run* (q) ,e) '(cat dog)) ;; mko from core-mk-explicit-failure-streams-tests.scm
  )

The idea here is that the first two mko calls from core-mk.scm can efficiently generate the conde and unifications, as in the "mko backwards-2" test in core-mk-tests.scm.  The mko call from core-mk-explicit-failure-streams-tests.scm can then be used to specify that the synthesized expression must not produce any other values that 'cat and 'dog (although the expression could contain an arbitrary number of failing conde branches).

See the "mko forwards unclosed" tests in core-mk-tests.scm to see how the expressions can't be "closed" in the core-mk-tests.scm code--there is no way to expression that the run expression should be capable of producting 'cat' and 'dog' as answers, but *nothing else*.  The "mko forwards unclosed" tests in core-mk-explicit-failure-streams-tests.scm allow for proper "closing".


Check that this does indeed work...

*this does appear to work--see the tests in `core-mk-simple-and-complex`*  We combine two *very* different relational mk interpreters to combine speed with expressiveness.


Compare this version with Michael Ballantyne's:

https://github.com/michaelballantyne/meta-minikanren/blob/master/mk-in-mk.scm

MB's version includes explicit incs, which this implementation does not.  There are other differences as well.  How well does it do in synthesizing code from the desired behavior?  Does it implement run* semantics?  Or can you specify run n?

Compare also to implementing microKanren in Scheme in the Barliman interpreter.



Try synthesizing the Judea Pearl Rifleman causal inference examples, using the code from Nada and Jeremy.

Try playing with declarative `findall`, like in Prolog.

Should run return a set rather than a list?  Or a bag, perhaps?

Try implementing run n in addition to run*.

Once we support recursive relations, run* may diverge.  In this case, the run 1 semantics of the simpler, more meta-circular mko may be especially useful.  Perhaps we really need to return a stream rather than a list.  Can we use co-inductive logic programming?

Seems like this implementation, and probably MB's, makes it work revisiting tabling for abstract interpretation, since we can get access to the entire list/set/bag of answers at once.

Try adding inc.

Can we play similar tricks with multiple versions of Scheme interpreters, and/or type-inferencers?
